[build-system]
requires = [
  "poetry-core>=1.2",
  "poetry-dynamic-versioning>=1.0.0,<2.0.0"
]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "pandoc-latex-environment"
version = "0.0.0.0"
description = "A pandoc filter for adding LaTeX environement on specific div"
authors = ["Christophe Demko <chdemko@gmail.com>"]
license = "BSD-3-Clause"
readme = "README.md"
homepage = "https://github.com/chdemko/pandoc-latex-environment"
keywords = ["pandoc", "filters", "latex", "environment"]
# See https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = [
  # How mature is this project? Common values are
  # 3 - Alpha
  # 4 - Beta
  # 5 - Production/Stable
  "Development Status :: 5 - Production/Stable",
  # Specify the OS
  "Operating System :: OS Independent",
  # Indicate who your project is intended for
  "Environment :: Console",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Documentation",
  "Topic :: Text Processing :: Filters",
  # Specify the Python versions you support here. In particular, ensure
  # that you indicate whether you support Python 2, Python 3 or both.
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  # Natural language used
  "Natural Language :: English"
]
packages = [{include = "pandoc_latex_environment/"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
panflute = "^2.3.1"

[tool.poetry.group.dev.dependencies]
# Tests
tox = "^4.18.0"
# pre-commit
pre-commit = "^3.8.0"
# pyupgrade
pyupgrade = "^3.17.0"
# Formatter
black = {extras = ["jupyter"], version = "^24.8.0"}
# Tests
pytest = "^8.3.2"
pytest-cov = "^4.1.0"
# Style checkers
doc8 = "^1.1.1"
mypy = "^1.11.1"
flake8 = "^7.1.1"
flake8-pyproject = "^1.2.3"
flake8-annotations-complexity = "^0.0.8"
flake8-black = "^0.3.6"
flake8-blind-except = "^0.2.1"
flake8-bugbear = "^24.4.26"
flake8-builtins = "^2.5.0"
flake8-cognitive-complexity = "^0.1.0"
flake8-comprehensions = "^3.15.0"
flake8-docstrings = "^1.7.0"
flake8-expression-complexity = "^0.0.11"
flake8-fixme = "^1.1.1"
flake8-functions = "^0.0.8"
flake8-import-order = "^0.18.2"
flake8-mypy = "^17.8.0"
flake8-pyi = "^24.6.0"
flake8-pydocstyle = "^0.2.4"
flake8-return = "^1.2.0"
flake8-simplify = "^0.21.0"
flake8-spellcheck = "^0.28.0"
flake8-use-fstring = "^1.4"
flake8-variables-names = "^0.0.6"
pep8-naming = "^0.13.3"
pylint = "^3.2.6"
ruff = "^0.5.0"
darglint = "^1.8.1"
pydoclint = {extras = ["flake8"], version = "^0.5.1"}
teyit = "^0.4.3"
slotscheck = "^0.17.3"
refurb = {version = "^2.0.0", python = ">=3.10"}

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = "^2.0"
Sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
sphinx-prompt = "^1.8.0"
sphinx-copybutton = "^0.5.2"

[tool.poetry.scripts]
pandoc-latex-environment = "pandoc_latex_environment:main"

[tool.flake8]
# flake8-docstrings
docstring-convention = "numpy"
# darglint
docstring_style = "numpy"
exclude = "*.pyi"
ignore = [
  # One-line docstring should fit on one line with quotes
  "D200",
  # Missing docstring in public method
  "D105",
  # line break before binary operator
  "W503",
  # Returning Any from function declared to return "..."
  "T484",
  # Multi-line construct missing trailing comma
  "S101",
  # Found ... errors in ... file (checked ... source file)
  "T499",
  # Cognitive complexity is too high
  "CCR001",
  # Function "__init__" has ... arguments that exceeds max allowed 6
  "CFQ002",
  # whitespace before ":"
  "E203",
  # Function attributes has length ... that exceeds max allowed length 100
  "CFQ001",
  # Function ... has ... returns that exceeds max allowed 3
  "CFQ004",
  # fixme found (TODO)
  "T101",
  # SIM119 Use a dataclass for "class ..."
  "SIM119",
  # Spelling error in name (e.g. variable, function, class)
  "SC200",
  # undefined name TODO: remove
  "F821",
  # The docstring parameter type doesn't match function.
  "DAR103",
  # Class docstring contains fewer class attributes than actual class attributes.
  "DOC601",
  # Class docstring attributes are different from actual class attributes.
  "DOC603"
]
max-line-length = 88
statistics = true
# pydoclint
arg-type-hints-in-docstring = false

[tool.pydoclint]
style = "numpy"

[tool.mypy]
disallow_any_generics = true
disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# check_untyped_defs = true
disallow_untyped_decorators = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
warn_redundant_casts = true
warn_return_any = true
# equivalent to --strict option
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "panflute.*"

[tool.poetry-dynamic-versioning]
enable = true
# tag regex
pattern = """(?x)                                                (?# ignore whitespace)
    ^v?((?P<epoch>\\d+)!)?(?P<base>\\d+(\\.\\d+)*)               (?# 1.2.3 or 1!2000.1.2)
    ([-._]?((?P<stage>[a-zA-Z]+)[-._]?(?P<revision>\\d+)?))?     (?# b0)
    (\\+(?P<tagged_metadata>.+))?$                               (?# +linux)
"""
# version format
format-jinja = """
    {%- set epoch = epoch if epoch|length else none -%}
    {%- if distance == 0 -%}
        {{- serialize_pep440(base, stage, revision, epoch=epoch) -}}
    {%- elif stage is not none -%}
        {{- serialize_pep440(base, stage, revision if revision else 0, epoch=epoch, post=distance, dev=0, metadata=[commit]) -}}
    {%- elif branch is none -%}
        {{- serialize_pep440(base, stage, revision, epoch=epoch, post=distance, dev=0, metadata=[commit]) -}}
    {%- elif branch.startswith('hotfix/') -%}
        {{- serialize_pep440(branch['hotfix/' | length:], 'a', 0, epoch=epoch, dev=distance, metadata=[commit]) -}}
    {%- elif branch.startswith('release/') -%}
        {{- serialize_pep440(branch['release/' | length:], 'a', 0, epoch=epoch, dev=distance, metadata=[commit]) -}}
    {%- elif branch.startswith('feature/') -%}
        {{- serialize_pep440(base, stage, revision, epoch=epoch, post=distance, dev=0, metadata=[branch_escaped['feature' | length:][:16], commit]) -}}
    {%- elif branch != 'develop' -%}
        {{- serialize_pep440(base, stage, revision, epoch=epoch, post=distance, dev=0, metadata=[branch_escaped[:16], commit]) -}}
    {%- else -%}
        {{- serialize_pep440(base, stage, revision, epoch=epoch, post=distance, dev=0, metadata=[commit]) -}}
    {%- endif -%}
"""

[tool.pydocstyle]
convention = "numpy"
